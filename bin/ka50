#!/usr/bin/env perl

use lib::abs '../lib';
use uni::perl ':dumper';
use POSIX 'strftime';

use EV;
use AE;
use Ka50;
use Ka50::Draw;

use Getopt::Long qw(:config gnu_getopt);
#use URI::Escape::XS qw(uri_escape uri_unescape);
use URI;
use List::Util 'max';
use Time::HiRes 'time';

$| = 1;
our $stop = 0;
sub sigstop {
	$stop++ and do {EV::unloop; exit };
	warn "Catched SIGINT. Stopping ($stop)...";
}

$SIG{INT} = \&sigstop;

sub date () { return strftime '%Y-%d-%m-%H.%M', localtime(); }


sub getopt {
	state $x = 0;
	#warn "$x... [@ARGV]";
	@ARGV or $x and return;
	my %o = (
		c => undef, # concurrency
		n => undef, # number
		t => undef, # time limit
		k => undef, # keep_alive
		r => undef, # rps,
		H => [],    # headers
		T => undef, # TCP connect instead of http
		detect => undef, # detect response time
		form => {fill => [], success => 302},
		auth => undef,
	);
	GetOptions(
		'-A=s' => \$o{auth},
		'-c=n' => \$o{c},
		'-n=n' => \$o{n},
		'-t=n' => \$o{t},
		'-r=s' => \$o{r},
		'-k'   => \$o{k},
		'-H=s' => $o{H},
		'-F'   => \$o{form}{use},
		'-T'   => \$o{T},
		'-d'   => \$o{detect},
		'--Ff=s' => $o{form}{fill},
		'--Fs=n' => $o{form}{success},
	) or die "Usage";

	my $url = shift @ARGV or die "Usage 2";

	$o{form}{use} = 1 if @{ $o{form}{fill} };
	$o{form}{use} or delete $o{form};
	if ($o{r} and $o{c}) {
		die "-r and -c are mutually exclusive\n";
	}
	if ($o{form}) {
		$o{c} or $o{n} and die "Can't use c or n with form";
		$o{c} = 1;
		$o{n} = 1;
		my $fill = delete $o{form}{fill};
		for (@$fill) {
			my ($k,$v) = split '=', $_, 2;
			$o{form}{fill}{$k} = $v;
		}
	} elsif ($o{r}) {
		$o{n} //= 1000;
	} else {
		$o{c} //= 5;
		$o{n} //= 1000;
	}
	for (@{ $o{H} }) {
		$o{headers}{lc $1} = $2 if /(.+?)(?:\s*=\s*(.+))/;
	}
	$o{url} = $url;
	++$x;
	return \%o;
}

sub form_request;

our $sig;
our %state;
sub run {
	my $o = shift;
	#warn "process ".dumper $o;
	$sig = AE::signal INT => sub {
		sigstop();
	};
	if ($o->{auth}) {
		use MIME::Base64 ();
		chomp( my $auth = MIME::Base64::encode( $o->{auth} ) );
		push @{ $o->{H} }, 'Authorization' => 'Basic '.$auth;
		unless ($o->{T}) {
			my $failed;
			http_request
				GET => $o->{url},
				headers => {
					@{ $o->{H} },
				},
				sub {
					if ($_[1]{Status} == 401) {
						$failed = 1;
						say "Authentication check on $o->{url} failed with $_[1]{Status} $_[1]{Reason}";
					} else {
						say "Authentication check on $o->{url} passed with $_[1]{Status}";
					}
					#warn dumper \@_;
					EV::unloop;
				};
			EV::loop;
			exit if $stop or $failed;
		}
	}
	my $headers = { @{$o->{H}}, $state{cookie} ? (cookie => $state{cookie}) : () };
	if ($o->{form}) {
		print "Form request to $o->{url}\n";
		if (!$o->{form}{fill}) {
			die "Use fill parameters --Ff='key=value'\n";
		}
		form_request
			$o->{url},
			headers => $headers,
			fill    => $o->{form}{fill},
			success => $o->{form}{success},
			sub {
				if ( my $ok = shift ) {
					@state{ keys %$ok } = values %$ok;
					print "State:\n";
					for (keys %$ok) {
						print "\t$_: $ok->{$_}\n";
					}
					#warn dumper \%state;
				} else {
					warn "Form request failed: @_";
					exit;
				}
				EV::unloop;
			};
		EV::loop;
	} else {
		my $i = 0;
		my @c;
		my $url = URI->new( $o->{url} );
		
		my $traffic = 0;
		my $zero = time;
		my $filename;
		my $end;
		my $cv = AE::cv {
			my $end = time;
			print "\n";
			ref $end and $end->();
			printf "Processed %d requests in %0.6fs\n", $i, time - $zero;
			my %stat;
			for (@c) {
				$stat{$_->[0]}++;
			}
			say "Responses:";
			for (sort {$a<=>$b} keys %stat) {
				say "\t".(-t STDIN ? "\e[".do {
					$_ < 200 ? "34;1" :
					$_ < 300 ? "32;1" :
					$_ < 400 ? "33;1" :
					$_ < 500 ? "31;0" :
					"31;1";
				}."m" :"")."Status $_".(-t STDIN ? "\e[0m" :"").": $stat{$_}";
			}
			printf "Traffic: %0.2fM, %0.2fk/r, %0.2fk/s\n", $traffic/1024/1024, $traffic/1024/$i, $traffic/1024/( time - $zero ) if $i > 0;
			draw($filename,@c);
			EV::unloop;
		};
		$cv->begin;
		my $N = $o->{n};
		if ($o->{T}) {
			if ($o->{url} =~ /^http(s|):/) {
				my $port = $1 ? 443 : 80;
				my $uri = URI->new($o->{url});
				$o->{url} = $uri->host . ':' . ( $uri->port || $port );
			}
			my ($ip,$port) = split /:/,$o->{url};
			$ip = Socket::inet_ntoa(gethostbyname( $ip ))
				or die "Can't resolve" unless eval { Socket::inet_aton $ip };
			$port //= 80;
			print "Benchmarking $ip:$port (".Socket::inet_ntoa(Socket::inet_aton($ip)).") with TCP connects\n";
			$filename = date().'-'.$ip.'.'.$port.'-T'.'.png';
			if (!$ENV{REALLY}){
				@c = [200,0.001,0.001];
				$cv->send;
				return;
			}
			$ip = Socket::inet_aton $ip;
			my @k;
			my $c;$c = sub {
				printf "\r%d connected ...",$i;
				raw_connect $ip, $port, sub {
					my $ix = $i++;
					my $st = time;
					if (my $fh = shift) {
						$k[$ix] = $fh; # keep
						$c[$ix] = [ 200, $st - $zero, time - $st ];
						return $cv->send if $stop;
						$c->();
					} else {
						print "$ix connect failed: $!\n";
						@k = ();
						$cv->send;
					}
				};
			};$c->();
		}
		elsif ($o->{detect}) {
			detect {
				my $next = shift;
				my $ix = $i++;
				my $st = time;
				$cv->begin;
				http_request
					GET     => $o->{url},
					headers => $headers,
					#GET => 'http://zoo.park.rambler.ru:19999/',
					cb => sub {
						$traffic += length $_[0];
						$c[$ix] = [ $_[1]{Status}, $st - $zero, time - $st, ];
						$cv->end;
						$next->();
					};
				return;
			} c => $o->{c}, n => $o->{n}, e => sub {
				say "End detecting with concurrency $o->{c}. Last $o->{n} requests was within time @_ s";
				$cv->end;
			};
			
		}
		elsif ($o->{c}) {
			print "Benchmarking $url with $o->{n} requests, using $o->{c} in parallel\n";
			$filename = date().'-'.$url->host . '-n'.$o->{n}.'-c'.$o->{c}.'.png';
			if (!$ENV{REALLY}){
				@c = [200,0.001,0.001];
				$cv->send;
				return;
			}
			my $headers = { @{$o->{H}} };
			my $x = con {
				my $next = shift;
				return $cv->send if $stop;
				my $ix = $i++;
				printf "\r%02.1f%% completed (%d)...",100*$i/$N, $i;
				my $st = time;
				$cv->begin;
				http_request
					GET => $o->{url},
					headers => $headers,
					cb => sub {
						$traffic += length $_[0];
						$c[$ix] = [ $_[1]{Status}, $st - $zero, time - $st, ];
						$cv->end;
						$next->();
					};
			} c => $o->{c}, n => $o->{n}, e => sub {
				$cv->end;
			};
		}
		elsif ($o->{r}) {
			print "Benchmarking $url with $o->{r} requests per second, using $o->{n} requests\n";
			$filename = date().'-'.$url->host . '-n'.$o->{n}.'-r'.$o->{r}.'.png';
			my $maxcon = 0;
			my $curcon = 0;
			$end = sub {
				printf "Max cuncurrent requests: %d\n",$maxcon;
			};
			if (!$ENV{REALLY}){
				@c = [200,0.001,0.001];
				$cv->send;
				return;
			}
			rps {
				return $cv->send if $stop;
				my $ix = $i++;
				#print "r $ix\n";
				#printf "\r%02.1f%% completed (%d)...",100*$i/$N, $i;
				$curcon++;
				$maxcon = max($maxcon,$curcon);
				my $st = time;
				$cv->begin;
				http_request
					GET => $o->{url},
					headers => $headers,
					cb => sub {
						$traffic += length $_[0];
						$c[$ix] = [ $_[1]{Status}, $st - $zero, time - $st, ];
						$cv->end;
						$curcon--;
					};
			} rps => $o->{r}, n => $o->{n}, e => sub {
				$cv->end;
			};
			
		}
		else {
			die "Don't know how to benchmark $url\n";
		}
		EV::loop();
		print "\n";
	}
}

while (my $o = getopt()) {
	run($o)
}


__END__

=for rem
my $i = 0;
my @c;
my $cv = AE::cv {
	draw(@c);
	EV::unloop;
};
my $zero = time;
$cv->begin;

=cut

__END__

sub wave (&@) {
	my $code = shift;
	my %args = @_;
	
}

wave {
	warn ".";
} fn => 'sin($t)', t => 1;
